import numpy as np

class WagnerWhitin():
    def __init__(self):
        pass

    def run(self, dict_in, demand):
        #Variablen definieren
        varKosten = dict_in["varCost"]
        fixKosten = dict_in["fixedCost"]
        bestellung = np.array(demand)   #Liste von den Bestellungen
        anzPeriode = len(demand)        #Anzahl der Periode
        minKosten = 0                     #Minimale Kosten
        kosten = [[0 for i in range(0, anzPeriode)] for j in range(0, anzPeriode)] #Kostenmatrix
        minListe = [0 for i in range(0, anzPeriode)] #liste von den minimalen Kosten je Periode
        periodeListe = []    #liste von den Bestellperioden
        bestellteMenge = [0 for i in range(0, anzPeriode)]  #Liste von den bestellten Mengen je Bestellperiode
        nullbestellung = 0  #Index, an welchen die Bestellungen null sind
        i = 0

        #aussuchen der Null Bestellungen ganz am Anfang
        #beginnen mit der ersten Nicht-Null Bestellung
        while bestellung[i] == 0:
            bestellteMenge[i] = 0
            i = i + 1
            if i == anzPeriode:
                i = i - 1
                break

        #Beginn der Schleife von Kostenmatrix
        for i in range(0, anzPeriode):
            if bestellung[i] > 0 or i == (anzPeriode - 1): #Bedingung erfüllt, wenn die Bestellmenge nicht null ist oder ganz am Ende der Bestellperiode
                for j in range(i, anzPeriode):
                    kosten[j][i] += fixKosten + minKosten
                    for k in range(i + 1, j + 1):
                        kosten[j][i] += varKosten * (k - i) * bestellung[k]
                minKosten = min(filter(None, kosten[i]))
                minListe[i] = minKosten
            else:
                i += 1

        #Rückwarts Schleife, Aussuchen der Bestellperiode,
        #mit der Beachtung, dass es Null Bestellungen dazwischen geben
        periode = anzPeriode
        while periode != 0:
            if bestellung[periode-1] != 0: #Wenn die Bestellung von vorherigen Periode gleich null ist, dann geht es zu vor vorherigen Periode
                index = kosten[periode-1].index(minListe[periode-1])
                periodeListe.insert(0, index)
                periode = index
                if periode == 0:
                    break
            else:
                periode = periode - 1

        #Berechnung der bestellten Mengen je Bestellperiode
        anzBestellperiode = len(periodeListe)
        j = 0
        for i in range (0, anzBestellperiode):
            j = periodeListe[i]
            if i < (anzBestellperiode-1):
                for j in range(j, periodeListe[i+1]):
                    bestellteMenge[periodeListe[i]] += bestellung[j]
            else:
                for j in range(j, anzPeriode):
                    bestellteMenge[periodeListe[i]] += bestellung[j]

        #Berechnung Bestellperiode + 1
        #for i in range(0, len(periodeListe)):
        #    periodeListe[i] = periodeListe[i] + 1

        #Definieren der Output Array
        if len(demand) == 0 or bestellung.max() == 0:
            output = np.array([0])
        else:
            #output = {"total_cost": np.array(kosten),
            #          "minimal": minListe,
            #          "Bestellperiode": periodeListe,
            #          "bestellte Mengen": bestellteMenge,
            #          "minimale Kosten": minKosten}
            print("Minimale Kosten: " + str(minKosten))
            output = np.array(bestellteMenge)
        return output


if __name__ == "__main__":
    # static test dictionary
    dict_in = {
        "planningPeriod": 8,  # Anzahl der Perioden
        "fixedCost": 10000,  # Bestellkosten
        "varCost": 1,  # Lagerhaltungssatz
        "roll": 4
    }
    #demand = [40, 50, 10, 20, 30, 40, 20, 25]
    #demand = [0, 0, 0, 10, 0, 1 ]
    #demand = [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0]
    #demand = [20, 50, 10, 50, 50, 10, 20, 40, 20, 30]
    #demand = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
    #demand = [0, 0, 1]
    #demand = [854, 1021, 984, 1030, 1240, 1178, 905, 1005, 958, 905, 966, 965, 1030, 1111, 1285, 1089, 959, 920]
    #demand = [300, 5001, 6022, 6103, 3533, 4046, 3044, 3023, 4064, 9552, 3960, 5077, 4000, 4000, 3430, 300, 3400, 3440, 200,
    #          3400, 9400, 4340, 3400, 300, 3040, 4000, 5000, 6500, 45454, 4443, 3244, 2334, 344, 3223, 2999, 4000, 4000,
    #          4000, 3400, 0, 0, 0, 4500, 400, 4500, 3400, 5400, 3000, 600, 0, 4500, 0, 0, 555, 4540, 500, 800,
    #          4555, 3000, 4555, 455, 3444, 4333, 2344, 4454, 4555, 3444]
    demand = [0, 0, 6022, 6103, 3533, 4046, 3044, 3023, 4064, 9552, 3960, 5077, 4000, 4000, 3430, 300, 3400, 3440, 200,
              3400, 9400, 4340, 3400, 300, 3040, 4000, 5000, 6500, 45454, 4443, 3244, 2334, 344, 3223, 2999, 4000, 4000,
              4000, 3400, 3400, 3444, 5006, 4500, 400, 4500, 3400, 5400, 0, 0, 0, 4500, 4500, 4400, 555, 4540, 0, 0,
              4555, 3000, 4555, 455, 3444, 4333, 2344, 4454, 4555, 3444]
    #demand = [300, 5001, 6022, 6103, 3533, 4046, 3044, 3023, 4064, 9552, 3960, 5077, 4000, 4000, 3430, 300, 3400, 3440,
    #          200, 3400, 9400, 4340, 3400, 300, 3040, 4000, 5000, 6500, 45454, 4443, 3244, 2334, 344, 3223, 2999, 4000, 4000,
    #          4000, 3400, 0, 0, 0, 4500, 400, 4500, 3400, 5400, 3000, 600, 0, 4500, 0, 0, 555, 4540, 500, 800,
    #          4555, 3000, 4555, 455, 3444, 4333, 2344, 4454, 4555, 3444]

    #demand = [0, 0, 0, 6103, 3533, 4046, 3044, 3023, 4064, 9552, 3960, 5077, 4000, 4000, 3430, 300, 3400, 3440,
    #          200, 3400, 9400, 4340, 3400, 300, 3040, 4000, 5000, 6500, 45454, 4443, 3244, 2334, 344, 3223, 2999, 4000, 4000,
    #          4000, 3400, 0, 0, 0, 4500, 400, 4500, 3400, 5400, 3000, 600, 0, 4500, 0, 0, 555, 4540, 500, 800,
    #          4555, 3000, 4555, 455, 3444, 4333, 2344, 4454, 4555, 3444]

    ww = WagnerWhitin()
    output = ww.run(dict_in, demand)
    print(output)
