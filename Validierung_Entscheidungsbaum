# -*- coding: utf-8 -*-
"""
Created on Thu Oct 21 14:35:02 2021

@author: Faustina Chandra
"""

#https://www.datacamp.com/community/tutorials/decision-tree-classification-python


# Load libraries
import pandas as pd
from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier
from sklearn.model_selection import train_test_split # Import train_test_split function
from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation

df = pd.read_csv('../Clustering/Rohdaten_Gesamtkosten_Rang_WW-Groff.csv', delimiter=";", encoding='unicode_escape')
#von .csv-Datei benötigter Spalten:
# *Servicegrad, Prognosefehler, Bestellkosten, WBZ, Label
# *Die Kommas müssen mit Punkten als Dezimaltrenner ersetzt werden
# *Die Label enthält nur [0, 1] Binär
# *Beim Plotten kann man später noch die Label von [0, 1] Entscheidung umbenennen

#split dataset in features and target variables
feature_cols = ['Servicegrad', 'Prognosefehler', 'Bestellkosten', 'WBZ']
X = df[feature_cols]
y = df['Label']

# Split dataset into training set and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=100)
#70% training and 30% test, random_state: times shuffeled

# Create Decision Tree classifer object
clf = DecisionTreeClassifier()

# Train Decision Tree Classifer
clf = clf.fit(X_train,y_train)

#Predict the response for test dataset
y_pred = clf.predict(X_test)

#Evaluating Model
# Model Accuracy, how often is the classifier correct?
print("Accuracy: ",metrics.accuracy_score(y_test, y_pred))

#Visualizing Decision Tree
from sklearn.tree import export_graphviz
from six import StringIO
from IPython.display import Image
import pydotplus

dot_data = StringIO()
export_graphviz(clf, out_file=dot_data,
                filled=True, rounded=True,
                special_characters=True,feature_names = feature_cols,class_names=['Wagner','Groff'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
#graph.write_png('DecisionTreeClustering.png')
#Image(graph.create_png())

# Create Decision Tree classifer object
clf = DecisionTreeClassifier(criterion="entropy", max_depth=10)

# Train Decision Tree Classifer
clf = clf.fit(X_train,y_train)

#Predict the response for test dataset
y_pred = clf.predict(X_test)

# Model Accuracy, how often is the classifier correct?
print("Accuracy: ",metrics.accuracy_score(y_test, y_pred))

#Visualizing new decision tree
from six import StringIO  
from IPython.display import Image  
from sklearn.tree import export_graphviz
import pydotplus
dot_data = StringIO()
export_graphviz(clf, out_file=dot_data,  
                filled=True, rounded=True,
                special_characters=True, feature_names = feature_cols,class_names=['Wagner','Groff'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
graph.write_png('DecisionTreeClustering2.png')
Image(graph.create_png())
